name: Build USD

on:
  push:
    branches: [ "main" ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
          repository: PixarAnimationStudios/OpenUSD
          ref: v23.11
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11' 
    - name: Install python packages
      run: |
          python -m pip install --upgrade pip
          pip install PySide6
          pip install PyOpenGL

    - name: Run build scripts
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          python build_scripts/build_usd.py ./Build --build-variant release --toolset v143 --generator "Visual Studio 17 2022"
      env:
           BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
           
    - name: Archive
      id: archive
      run: |
          echo "archiving files..."

          $tagName = & git describe --tags
          $version = $tagName.TrimStart("v")
          $binArchive = "Lumengine-USD_23.11_windows_x64_py3.11_$version.zip"

          echo "::set-output name=USD_BINARY_ARCHIVE::$binArchive"
          
          7z a "$binArchive" ${{github.workspace}}/Build

    - name: Publish
      uses: softprops/action-gh-release@v1
      with:
          files: |
            ${{ steps.archive.outputs.USD_BINARY_ARCHIVE }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

